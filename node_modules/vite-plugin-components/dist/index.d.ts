import { Plugin } from 'vite';
import { TransformResult } from 'rollup';

interface ImportInfo {
    name?: string;
    importName?: string;
    path: string;
}
declare type SideEffectsInfo = (ImportInfo | string)[] | ImportInfo | string | undefined;
interface ComponentInfo extends ImportInfo {
    sideEffects?: SideEffectsInfo;
}
declare type ComponentResolveResult = string | ComponentInfo;
declare type ComponentResolver = (name: string) => ComponentResolveResult | null | undefined | void;
interface UILibraryOptions {
    name: string;
    prefix?: string;
    entries?: string[];
}
declare type Matcher = (id: string) => boolean | null | undefined;
declare type Transformer = (code: string, id: string, path: string, query: Record<string, string>) => null | TransformResult;
/**
 * Plugin options.
 */
interface Options {
    /**
     * Relative paths to the directory to search for components.
     * @default 'src/components'
     */
    dirs?: string | string[];
    /**
     * Valid file extensions for components.
     * @default ['vue']
     */
    extensions?: string | string[];
    /**
     * Search for subdirectories
     * @default true
     */
    deep?: boolean;
    /**
     * Allow subdirectories as namespace prefix for components
     * @default false
     */
    directoryAsNamespace?: boolean;
    /**
     * Subdirectory paths for ignoring namespace prefixes
     * works when `directoryAsNamespace: true`
     * @default "[]"
     */
    globalNamespaces?: string[];
    /**
     * comp libraries to use auto import
     */
    libraries?: (string | UILibraryOptions)[];
    /**
     * Auto-import for custom loader (md, svg, etc.). Returns true to enable for certain files.
     *
     * @default ()=>false
     */
    customLoaderMatcher?: Matcher;
    /**
     * Pass a custom function to resolve the component importing path from the component name.
     *
     * The component names are always in PascalCase
     */
    customComponentResolvers?: ComponentResolver | ComponentResolver[];
    /**
     * Apply custom transform over the path for importing
     */
    importPathTransform?: (path: string) => string | undefined;
    /**
     * Transformer to apply
     *
     * @default 'vue3'
     */
    transformer?: 'vue3' | 'vue2';
    /**
     * Generate TypeScript declaration for global components
     *
     * Accept boolean or a path related to project root
     *
     * @see https://github.com/vuejs/vue-next/pull/3399
     * @see https://github.com/johnsoncodehk/volar#using
     * @default false
     */
    globalComponentsDeclaration?: boolean | string;
    /**
     * Do not emit warning on component overriding
     *
     * @default false
     */
    allowOverrides?: boolean;
}
declare type ResolvedOptions = Omit<Required<Options>, 'customComponentResolvers' | 'libraries' | 'extensions' | 'dirs'> & {
    customComponentResolvers: ComponentResolver[];
    libraries: UILibraryOptions[];
    extensions: string[];
    dirs: string[];
    resolvedDirs: string[];
    globs: string[];
    globalComponentsDeclaration: string | false;
    root: string;
};
declare type ComponentsImportMap = Record<string, string[] | undefined>;

declare function tryLoadVeturTags(name: string): string[] | undefined;
declare function LibraryResolver(options: UILibraryOptions): ComponentResolver;

interface AntDesignVueResolverOptions {
    /**
     * import style along with components
     *
     * @default 'css'
     */
    importStyle?: boolean | 'css' | 'less';
    /**
     * resolve `ant-design-vue' icons
     *
     * requires package `@ant-design/icons-vue`
     *
     * @default false
     */
    resolveIcons?: boolean;
    /**
     * @deprecated use `importStyle: 'css'` instead
     */
    importCss?: boolean;
    /**
     * @deprecated use `importStyle: 'less'` instead
     */
    importLess?: boolean;
}
/**
 * Resolver for Ant Design Vue
 *
 * Requires ant-design-vue@v2.2.0-beta.6 or later
 *
 * See https://github.com/antfu/vite-plugin-components/issues/26#issuecomment-789767941 for more details
 *
 * @author @yangss3
 * @link https://antdv.com/
 */
declare function AntDesignVueResolver(options?: AntDesignVueResolverOptions): ComponentResolver;

interface ElementPlusResolverOptions {
    /**
     * import style along with components
     *
     * @default true
     */
    importStyle?: boolean;
}
/**
 * Resolver for Element Plus
 *
 * See https://github.com/antfu/vite-plugin-components/pull/28 for more details
 *
 * @author @develar
 * @link https://element-plus.org/#/en-US
 */
declare function ElementPlusResolver(options?: ElementPlusResolverOptions): ComponentResolver;

interface ElementUiResolverOptions {
    /**
     * import style css or sass with components
     *
     * @default 'css'
     */
    importStyle?: boolean | 'css' | 'sass';
}
/**
 * Resolver for Element-UI
 * @link https://element.eleme.cn/#/zh-CN
 * @version @element-ui ^2.15.3, @vue ^2.6.14
 * @author @nabaonan
 */
declare function ElementUiResolver(options?: ElementUiResolverOptions): ComponentResolver;

/**
 * Resolver for headlessui
 *
 * @link https://github.com/tailwindlabs/headlessui
 */
declare function HeadlessUiResolver(): ComponentResolver;

/**
 * Resolver for Naive UI
 *
 * @author @antfu
 * @link https://www.naiveui.com/
 */
declare function NaiveUiResolver(): ComponentResolver;

interface PrimeVueResolverOptions {
    /**
     * import style along with components
     *
     * @default true
     */
    importStyle?: boolean;
    /**
     * import `primeicons' icons
     *
     * requires package `primeicons`
     *
     * @default true
     */
    importIcons?: boolean;
    /**
     * imports a free theme - set theme name here (e.g. saga-blue)
     *
     * @default ''
     */
    importTheme?: string;
}
/**
 * Resolver for PrimeVue - If you're using a component with the same tag as an native HTML element (e.g. button) the component must be in uppercase
 *
 * @link https://github.com/primefaces/primevue
 */
declare function PrimeVueResolver(options?: PrimeVueResolverOptions): ComponentResolver;

interface VantResolverOptions {
    /**
     * import style along with components
     *
     * @default true
     */
    importStyle?: boolean;
}
/**
 * Resolver for Vant
 *
 * @link https://github.com/youzan/vant
 */
declare function VantResolver(options?: VantResolverOptions): ComponentResolver;

interface VarletUIResolverOptions {
    /**
     * import style along with components
     *
     * @default 'css'
     */
    importStyle?: boolean | 'css' | 'less';
    /**
     * @deprecated use `importStyle: 'css'` instead
     */
    importCss?: boolean;
    /**
     * @deprecated use `importStyle: 'less'` instead
     */
    importLess?: boolean;
}
/**
 * Resolver for VarletUI
 *
 * @link https://github.com/haoziqaq/varlet
 */
declare function VarletUIResolver(options?: VarletUIResolverOptions): ComponentResolver;

/**
 * Resolver for View UI
 * @requires @originjs/vite-plugin-commonjs
 * @author @nabaonan
 * @link https://www.iviewui.com/
 * @description has known problems list below
 * - select component render error PR: https://github.com/view-design/ViewUI/pull/944,  choose can't display value,because click option trigger twice,at second time,select value turn into undefined.
 * - scroll component has a template syntax called lang='html',it is require html-loader,but vite plugin not support yet,remove it can run.
 */
declare function ViewUiResolver(): ComponentResolver;

/**
 * Resolver for Vuetify
 *
 * @link https://github.com/vuetifyjs/vuetify
 */
declare function VuetifyResolver(): ComponentResolver;

/**
 * Resolver for VueUse
 *
 * @link https://github.com/vueuse/vueuse
 */
declare function VueUseComponentsResolver(): ComponentResolver;

declare function pascalCase(str: string): string;
declare function camelCase(str: string): string;
declare function kebabCase(key: string): string;

declare function VitePluginComponents(options?: Options): Plugin;

export default VitePluginComponents;
export { AntDesignVueResolver, AntDesignVueResolverOptions, ComponentInfo, ComponentResolveResult, ComponentResolver, ComponentsImportMap, ElementPlusResolver, ElementPlusResolverOptions, ElementUiResolver, ElementUiResolverOptions, HeadlessUiResolver, ImportInfo, LibraryResolver, Matcher, NaiveUiResolver, Options, PrimeVueResolver, PrimeVueResolverOptions, ResolvedOptions, SideEffectsInfo, Transformer, UILibraryOptions, VantResolver, VantResolverOptions, VarletUIResolver, VarletUIResolverOptions, ViewUiResolver, VueUseComponentsResolver, VuetifyResolver, camelCase, kebabCase, pascalCase, tryLoadVeturTags };
