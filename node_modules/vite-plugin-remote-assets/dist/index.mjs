var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (cb, mod) => () => (mod || cb((mod = {exports: {}}).exports, mod), mod.exports);
var __reExport = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
};

// node_modules/.pnpm/blueimp-md5@2.18.0/node_modules/blueimp-md5/js/md5.js
var require_md5 = __commonJS((exports, module) => {
  (function($) {
    "use strict";
    function safeAdd(x, y) {
      var lsw = (x & 65535) + (y & 65535);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    function binlMD5(x, len) {
      x[len >> 5] |= 128 << len % 32;
      x[(len + 64 >>> 9 << 4) + 14] = len;
      var i;
      var olda;
      var oldb;
      var oldc;
      var oldd;
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;
      for (i = 0; i < x.length; i += 16) {
        olda = a;
        oldb = b;
        oldc = c;
        oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function binl2rstr(input) {
      var i;
      var output = "";
      var length32 = input.length * 32;
      for (i = 0; i < length32; i += 8) {
        output += String.fromCharCode(input[i >> 5] >>> i % 32 & 255);
      }
      return output;
    }
    function rstr2binl(input) {
      var i;
      var output = [];
      output[(input.length >> 2) - 1] = void 0;
      for (i = 0; i < output.length; i += 1) {
        output[i] = 0;
      }
      var length8 = input.length * 8;
      for (i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << i % 32;
      }
      return output;
    }
    function rstrMD5(s) {
      return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
    }
    function rstrHMACMD5(key, data) {
      var i;
      var bkey = rstr2binl(key);
      var ipad = [];
      var opad = [];
      var hash;
      ipad[15] = opad[15] = void 0;
      if (bkey.length > 16) {
        bkey = binlMD5(bkey, key.length * 8);
      }
      for (i = 0; i < 16; i += 1) {
        ipad[i] = bkey[i] ^ 909522486;
        opad[i] = bkey[i] ^ 1549556828;
      }
      hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
      return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
    }
    function rstr2hex(input) {
      var hexTab = "0123456789abcdef";
      var output = "";
      var x;
      var i;
      for (i = 0; i < input.length; i += 1) {
        x = input.charCodeAt(i);
        output += hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15);
      }
      return output;
    }
    function str2rstrUTF8(input) {
      return unescape(encodeURIComponent(input));
    }
    function rawMD5(s) {
      return rstrMD5(str2rstrUTF8(s));
    }
    function hexMD5(s) {
      return rstr2hex(rawMD5(s));
    }
    function rawHMACMD5(k, d) {
      return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
    }
    function hexHMACMD5(k, d) {
      return rstr2hex(rawHMACMD5(k, d));
    }
    function md52(string, key, raw) {
      if (!key) {
        if (!raw) {
          return hexMD5(string);
        }
        return rawMD5(string);
      }
      if (!raw) {
        return hexHMACMD5(key, string);
      }
      return rawHMACMD5(key, string);
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return md52;
      });
    } else if (typeof module === "object" && module.exports) {
      module.exports = md52;
    } else {
      $.md5 = md52;
    }
  })(exports);
});

// node_modules/.pnpm/@antfu+utils@0.1.4/node_modules/@antfu/utils/dist/index.js
var require_dist = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  function clamp(n, min, max) {
    return Math.min(max, Math.max(min, n));
  }
  function sum(...args) {
    return flattenArrayable(args).reduce((a, b) => a + b, 0);
  }
  function toArray(array) {
    array = array || [];
    if (Array.isArray(array))
      return array;
    return [array];
  }
  function flattenArrayable(array) {
    return toArray(array).flat(1);
  }
  function mergeArrayable(...args) {
    return args.flatMap((i) => toArray(i));
  }
  function partition(array, filter) {
    const pass = [];
    const fail = [];
    array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));
    return [pass, fail];
  }
  function uniq(array) {
    return Array.from(new Set(array));
  }
  function last(array) {
    return at(array, -1);
  }
  function remove(array, value) {
    if (!array)
      return false;
    const index = array.indexOf(value);
    if (index >= 0) {
      array.splice(index, 1);
      return true;
    }
    return false;
  }
  function at(array, index) {
    const len = array.length;
    if (!len)
      return void 0;
    if (index < 0)
      index += len;
    return array[index];
  }
  function range(...args) {
    let start, stop, step;
    if (args.length === 1) {
      start = 0;
      step = 1;
      [stop] = args;
    } else {
      [start, stop, step = 1] = args;
    }
    const arr = [];
    let current = start;
    while (current < stop) {
      arr.push(current);
      current += step || 1;
    }
    return arr;
  }
  function move(arr, from, to) {
    arr.splice(to, 0, arr.splice(from, 1)[0]);
    return arr;
  }
  function clampArrayRange(n, arr) {
    return clamp(n, 0, arr.length - 1);
  }
  var assert = (condition, ...infos) => {
    if (!condition)
      throw new Error(...infos);
  };
  var toString2 = Object.prototype.toString;
  var noop = () => {
  };
  function notNullish(v) {
    return v != null;
  }
  function noNull(v) {
    return v !== null;
  }
  function notUndefined(v) {
    return v !== void 0;
  }
  function isTruthy(v) {
    return Boolean(v);
  }
  var isBrowser = typeof window !== "undefined";
  var isDef = (val) => typeof val !== "undefined";
  var isBoolean = (val) => typeof val === "boolean";
  var isFunction = (val) => typeof val === "function";
  var isNumber = (val) => typeof val === "number";
  var isString = (val) => typeof val === "string";
  var isObject = (val) => toString.call(val) === "[object Object]";
  var isWindow = (val) => typeof window !== "undefined" && toString.call(val) === "[object Window]";
  function slash2(str) {
    return str.replace(/\\/g, "/");
  }
  var timestamp = () => +Date.now();
  function batchInvoke(functions) {
    functions.forEach((fn) => fn && fn());
  }
  function invoke(fn) {
    return fn();
  }
  function objectMap(obj, fn) {
    return Object.fromEntries(Object.entries(obj).map(([k, v]) => fn(k, v)).filter(notNullish));
  }
  function isKeyOf(obj, k) {
    return k in obj;
  }
  function objectKeys(obj) {
    return Object.keys(obj);
  }
  function objectEntries(obj) {
    return Object.entries(obj);
  }
  function deepMerge(target, ...sources) {
    if (!sources.length)
      return target;
    const source = sources.shift();
    if (source === void 0)
      return target;
    if (isMergableObject(target) && isMergableObject(source)) {
      objectKeys(source).forEach((key) => {
        if (isMergableObject(source[key])) {
          if (!target[key])
            target[key] = {};
          deepMerge(target[key], source[key]);
        } else {
          target[key] = source[key];
        }
      });
    }
    return deepMerge(target, ...sources);
  }
  function isMergableObject(item) {
    return isObject(item) && !Array.isArray(item);
  }
  function objectPick(obj, keys, omitUndefined = false) {
    return keys.reduce((n, k) => {
      if (k in obj) {
        if (!omitUndefined || !obj[k] === void 0)
          n[k] = obj[k];
      }
      return n;
    }, {});
  }
  function createSingletonPromise(fn) {
    let _promise;
    function wrapper() {
      if (!_promise)
        _promise = fn();
      return _promise;
    }
    wrapper.reset = async () => {
      const _prev = _promise;
      _promise = void 0;
      if (_prev)
        await _prev;
    };
    return wrapper;
  }
  function sleep(ms, callback) {
    return new Promise((resolve2) => setTimeout(async () => {
      await (callback == null ? void 0 : callback());
      resolve2();
    }, ms));
  }
  exports.assert = assert;
  exports.at = at;
  exports.batchInvoke = batchInvoke;
  exports.clamp = clamp;
  exports.clampArrayRange = clampArrayRange;
  exports.createSingletonPromise = createSingletonPromise;
  exports.deepMerge = deepMerge;
  exports.flattenArrayable = flattenArrayable;
  exports.invoke = invoke;
  exports.isBoolean = isBoolean;
  exports.isBrowser = isBrowser;
  exports.isDef = isDef;
  exports.isFunction = isFunction;
  exports.isKeyOf = isKeyOf;
  exports.isNumber = isNumber;
  exports.isObject = isObject;
  exports.isString = isString;
  exports.isTruthy = isTruthy;
  exports.isWindow = isWindow;
  exports.last = last;
  exports.mergeArrayable = mergeArrayable;
  exports.move = move;
  exports.noNull = noNull;
  exports.noop = noop;
  exports.notNullish = notNullish;
  exports.notUndefined = notUndefined;
  exports.objectEntries = objectEntries;
  exports.objectKeys = objectKeys;
  exports.objectMap = objectMap;
  exports.objectPick = objectPick;
  exports.partition = partition;
  exports.range = range;
  exports.remove = remove;
  exports.slash = slash2;
  exports.sleep = sleep;
  exports.sum = sum;
  exports.timestamp = timestamp;
  exports.toArray = toArray;
  exports.toString = toString2;
  exports.uniq = uniq;
});

// src/index.ts
var import_blueimp_md5 = __toModule(require_md5());
var import_utils = __toModule(require_dist());
import {extname, relative, dirname, resolve} from "path";
import axios from "axios";
import {existsSync, createWriteStream, ensureDir, emptyDir, unlink} from "fs-extra";
import _debug from "debug";
import MagicString from "magic-string";
var DefaultRules = [
  {
    match: /\b(https?:\/\/[\w_#&?.\/-]*?\.(?:png|jpe?g|svg|ico))(?=[`'")\]])/ig
  }
];
function isValidHttpUrl(str) {
  let url;
  try {
    url = new URL(str);
  } catch (_) {
    return false;
  }
  return url.protocol === "http:" || url.protocol === "https:";
}
var debug = _debug("vite-plugin-remote-assets");
function VitePluginRemoteAssets(options = {}) {
  const {
    assetsDir = "node_modules/.remote-assets",
    rules = DefaultRules,
    resolveMode = "relative",
    awaitDownload = true
  } = options;
  let dir = void 0;
  let config;
  let server;
  async function downloadTo(url, filepath) {
    const writer = createWriteStream(filepath);
    const response = await axios({
      url,
      method: "GET",
      responseType: "stream"
    });
    response.data.pipe(writer);
    return new Promise((resolve2, reject) => {
      writer.on("finish", resolve2);
      writer.on("error", reject);
    });
  }
  const tasksMap = {};
  async function transform(code, id) {
    const tasks = [];
    const s = new MagicString(code);
    let hasReplaced = false;
    let match;
    for (const rule of rules) {
      rule.match.lastIndex = 0;
      while (match = rule.match.exec(code)) {
        const start = match.index;
        const end = start + match[0].length;
        const url = match[0];
        if (!url || !isValidHttpUrl(url))
          continue;
        const hash = (0, import_blueimp_md5.default)(url) + (rule.ext || extname(url));
        const filepath = (0, import_utils.slash)(resolve(dir, hash));
        debug("detected", url, hash);
        if (!existsSync(filepath) || tasksMap[filepath]) {
          if (!tasksMap[filepath]) {
            tasksMap[filepath] = (async () => {
              try {
                debug("downloading", url);
                await downloadTo(url, filepath);
                debug("downloaded", url);
              } catch (e) {
                if (existsSync(filepath))
                  await unlink(filepath);
                throw e;
              } finally {
                delete tasksMap[filepath];
              }
            })();
          }
          tasks.push(tasksMap[filepath]);
          if (!awaitDownload)
            continue;
        }
        hasReplaced = true;
        const mode = typeof resolveMode === "function" ? resolveMode(id, url) : resolveMode;
        let newUrl;
        if (mode === "relative") {
          newUrl = (0, import_utils.slash)(relative(dirname(id), `${dir}/${hash}`));
          if (newUrl[0] !== ".")
            newUrl = `./${newUrl}`;
        } else {
          let path = `${dir}/${hash}`;
          if (!path.startsWith("/"))
            path = `/${path}`;
          newUrl = `/@fs${path}`;
        }
        s.overwrite(start, end, newUrl);
      }
    }
    if (tasks.length) {
      if (awaitDownload) {
        await Promise.all(tasks);
      } else {
        Promise.all(tasks).then(() => {
          if (server) {
            const module = server.moduleGraph.getModuleById(id);
            if (module)
              server.moduleGraph.invalidateModule(module);
          }
        });
      }
    }
    if (!hasReplaced)
      return null;
    return {
      code: s.toString(),
      map: config.build.sourcemap ? s.generateMap({hires: true}) : null
    };
  }
  return {
    name: "vite-plugin-remote-assets",
    enforce: "pre",
    async configResolved(_config) {
      config = _config;
      dir = (0, import_utils.slash)(resolve(config.root, assetsDir));
      if (config.server.force)
        await emptyDir(dir);
      await ensureDir(dir);
    },
    configureServer(_server) {
      server = _server;
    },
    async transform(code, id) {
      return await transform(code, id);
    },
    transformIndexHtml: {
      enforce: "pre",
      async transform(code, ctx) {
        var _a;
        return (_a = await transform(code, ctx.filename)) == null ? void 0 : _a.code;
      }
    }
  };
}
var src_default = VitePluginRemoteAssets;
export {
  DefaultRules,
  VitePluginRemoteAssets,
  src_default as default
};
