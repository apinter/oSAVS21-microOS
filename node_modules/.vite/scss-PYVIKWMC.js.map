{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/scss/scss.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\r\n    comments: {\r\n        blockComment: ['/*', '*/'],\r\n        lineComment: '//'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/'),\r\n            end: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.scss',\r\n    ws: '[ \\t\\n\\r\\f]*',\r\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.bracket' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    tokenizer: {\r\n        root: [{ include: '@selector' }],\r\n        selector: [\r\n            { include: '@comments' },\r\n            { include: '@import' },\r\n            { include: '@variabledeclaration' },\r\n            { include: '@warndebug' },\r\n            ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],\r\n            [\r\n                '[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\r\n                { token: 'keyword', next: '@keyframedeclaration' }\r\n            ],\r\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\r\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\r\n            ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\r\n            ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\r\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\r\n            { include: '@controlstatement' },\r\n            { include: '@selectorname' },\r\n            ['[&\\\\*]', 'tag'],\r\n            ['[>\\\\+,]', 'delimiter'],\r\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\r\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }]\r\n        ],\r\n        selectorbody: [\r\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\r\n            { include: '@selector' },\r\n            ['[@](extend)', { token: 'keyword', next: '@extendbody' }],\r\n            ['[@](return)', { token: 'keyword', next: '@declarationbody' }],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        selectorname: [\r\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\r\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\r\n        ],\r\n        selectorattribute: [\r\n            { include: '@term' },\r\n            [']', { token: 'delimiter.bracket', next: '@pop' }]\r\n        ],\r\n        term: [\r\n            { include: '@comments' },\r\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\r\n            { include: '@functioninvocation' },\r\n            { include: '@numbers' },\r\n            { include: '@strings' },\r\n            { include: '@variablereference' },\r\n            ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\r\n            { include: '@name' },\r\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\r\n            [',', 'delimiter'],\r\n            ['!default', 'literal'],\r\n            ['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }]\r\n        ],\r\n        rulevalue: [\r\n            { include: '@term' },\r\n            ['!important', 'literal'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        nestedproperty: [\r\n            ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\r\n            { include: '@comments' },\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        warndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\r\n        import: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\r\n        variabledeclaration: [\r\n            // sass variables\r\n            ['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody']\r\n        ],\r\n        urldeclaration: [\r\n            { include: '@strings' },\r\n            ['[^)\\r\\n]+', 'string'],\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        parenthizedterm: [\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\r\n        ],\r\n        declarationbody: [\r\n            { include: '@term' },\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        extendbody: [\r\n            { include: '@selectorname' },\r\n            ['!optional', 'literal'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        variablereference: [\r\n            // sass variable reference\r\n            ['\\\\$@identifier', 'variable.ref'],\r\n            ['\\\\.\\\\.\\\\.', 'operator'],\r\n            ['#{', { token: 'meta', next: '@variableinterpolation' }] // sass var resolve\r\n        ],\r\n        variableinterpolation: [\r\n            { include: '@variablereference' },\r\n            ['}', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        comments: [\r\n            ['\\\\/\\\\*', 'comment', '@comment'],\r\n            ['\\\\/\\\\/+.*', 'comment']\r\n        ],\r\n        comment: [\r\n            ['\\\\*\\\\/', 'comment', '@pop'],\r\n            ['.', 'comment']\r\n        ],\r\n        name: [['@identifier', 'attribute.value']],\r\n        numbers: [\r\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\r\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex']\r\n        ],\r\n        units: [\r\n            [\r\n                '(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\r\n                'number',\r\n                '@pop'\r\n            ]\r\n        ],\r\n        functiondeclaration: [\r\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }]\r\n        ],\r\n        mixindeclaration: [\r\n            // mixin with parameters\r\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\r\n            // mixin without parameters\r\n            ['@identifier', 'meta'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        parameterdeclaration: [\r\n            ['\\\\$@identifier@ws:', 'variable.decl'],\r\n            ['\\\\.\\\\.\\\\.', 'operator'],\r\n            [',', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        includedeclaration: [\r\n            { include: '@functioninvocation' },\r\n            ['@identifier', 'meta'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        keyframedeclaration: [\r\n            ['@identifier', 'meta'],\r\n            ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }]\r\n        ],\r\n        keyframebody: [\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        controlstatement: [\r\n            [\r\n                '[@](if|else|for|while|each|media)',\r\n                { token: 'keyword.flow', next: '@controlstatementdeclaration' }\r\n            ]\r\n        ],\r\n        controlstatementdeclaration: [\r\n            ['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\r\n        ],\r\n        functionbody: [\r\n            ['[@](return)', { token: 'keyword' }],\r\n            { include: '@variabledeclaration' },\r\n            { include: '@term' },\r\n            { include: '@controlstatement' },\r\n            [';', 'delimiter'],\r\n            ['}', { token: 'delimiter.curly', next: '@pop' }]\r\n        ],\r\n        functioninvocation: [['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }]],\r\n        functionarguments: [\r\n            ['\\\\$@identifier@ws:', 'attribute.name'],\r\n            ['[,]', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'meta', next: '@pop' }]\r\n        ],\r\n        strings: [\r\n            ['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\r\n            [\"~?'\", { token: 'string.delimiter', next: '@stringendquote' }]\r\n        ],\r\n        stringenddoublequote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            ['\"', { token: 'string.delimiter', next: '@pop' }],\r\n            ['.', 'string']\r\n        ],\r\n        stringendquote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            [\"'\", { token: 'string.delimiter', next: '@pop' }],\r\n            ['.', 'string']\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
