import {
  ViteSlidevPlugin,
  getIndexHtml
} from "./chunk-WW3PRZGC.mjs";
import {
  __commonJS,
  __require,
  __spreadValues,
  __toModule
} from "./chunk-G3DZBNYL.mjs";

// ../../node_modules/.pnpm/@polka+url@1.0.0-next.15/node_modules/@polka/url/build.js
var require_build = __commonJS({
  "../../node_modules/.pnpm/@polka+url@1.0.0-next.15/node_modules/@polka/url/build.js"(exports) {
    var qs = __require("querystring");
    function parse(req, toDecode) {
      let raw = req.url;
      if (raw == null)
        return;
      let prev = req._parsedUrl;
      if (prev && prev.raw === raw)
        return prev;
      let pathname = raw, search = "", query;
      if (raw.length > 1) {
        let idx = raw.indexOf("?", 1);
        if (idx !== -1) {
          search = raw.substring(idx);
          pathname = raw.substring(0, idx);
          if (search.length > 1) {
            query = qs.parse(search.substring(1));
          }
        }
        if (!!toDecode && !req._decoded) {
          req._decoded = true;
          if (pathname.indexOf("%") !== -1) {
            try {
              pathname = decodeURIComponent(pathname);
            } catch (e) {
            }
          }
        }
      }
      return req._parsedUrl = { pathname, search, query, raw };
    }
    exports.parse = parse;
  }
});

// ../../node_modules/.pnpm/totalist@1.1.0/node_modules/totalist/sync/index.js
var require_sync = __commonJS({
  "../../node_modules/.pnpm/totalist@1.1.0/node_modules/totalist/sync/index.js"(exports, module) {
    var { join: join2, resolve: resolve2 } = __require("path");
    var { readdirSync, statSync } = __require("fs");
    module.exports = function list(dir, callback, pre = "") {
      dir = resolve2(".", dir);
      let arr = readdirSync(dir);
      let i = 0, abs, stats;
      for (; i < arr.length; i++) {
        abs = join2(dir, arr[i]);
        stats = statSync(abs);
        stats.isDirectory() ? list(abs, callback, join2(pre, arr[i])) : callback(join2(pre, arr[i]), abs, stats);
      }
    };
  }
});

// ../../node_modules/.pnpm/mime@2.5.2/node_modules/mime/Mime.js
var require_Mime = __commonJS({
  "../../node_modules/.pnpm/mime@2.5.2/node_modules/mime/Mime.js"(exports, module) {
    "use strict";
    function Mime() {
      this._types = Object.create(null);
      this._extensions = Object.create(null);
      for (let i = 0; i < arguments.length; i++) {
        this.define(arguments[i]);
      }
      this.define = this.define.bind(this);
      this.getType = this.getType.bind(this);
      this.getExtension = this.getExtension.bind(this);
    }
    Mime.prototype.define = function(typeMap, force) {
      for (let type in typeMap) {
        let extensions = typeMap[type].map(function(t) {
          return t.toLowerCase();
        });
        type = type.toLowerCase();
        for (let i = 0; i < extensions.length; i++) {
          const ext = extensions[i];
          if (ext[0] === "*") {
            continue;
          }
          if (!force && ext in this._types) {
            throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
          }
          this._types[ext] = type;
        }
        if (force || !this._extensions[type]) {
          const ext = extensions[0];
          this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
        }
      }
    };
    Mime.prototype.getType = function(path) {
      path = String(path);
      let last = path.replace(/^.*[/\\]/, "").toLowerCase();
      let ext = last.replace(/^.*\./, "").toLowerCase();
      let hasPath = last.length < path.length;
      let hasDot = ext.length < last.length - 1;
      return (hasDot || !hasPath) && this._types[ext] || null;
    };
    Mime.prototype.getExtension = function(type) {
      type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
      return type && this._extensions[type.toLowerCase()] || null;
    };
    module.exports = Mime;
  }
});

// ../../node_modules/.pnpm/mime@2.5.2/node_modules/mime/types/standard.js
var require_standard = __commonJS({
  "../../node_modules/.pnpm/mime@2.5.2/node_modules/mime/types/standard.js"(exports, module) {
    module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma", "es"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/mrb-consumer+xml": ["*xdf"], "application/mrb-publish+xml": ["*xdf"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["*xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-error+xml": ["xer"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  }
});

// ../../node_modules/.pnpm/mime@2.5.2/node_modules/mime/lite.js
var require_lite = __commonJS({
  "../../node_modules/.pnpm/mime@2.5.2/node_modules/mime/lite.js"(exports, module) {
    "use strict";
    var Mime = require_Mime();
    module.exports = new Mime(require_standard());
  }
});

// ../../node_modules/.pnpm/sirv@1.0.12/node_modules/sirv/build.js
var require_build2 = __commonJS({
  "../../node_modules/.pnpm/sirv@1.0.12/node_modules/sirv/build.js"(exports, module) {
    var fs2 = __require("fs");
    var { join: join2, normalize, resolve: resolve2 } = __require("path");
    var { parse } = require_build();
    var list = require_sync();
    var mime = require_lite();
    var noop = () => {
    };
    function isMatch(uri, arr) {
      for (let i = 0; i < arr.length; i++) {
        if (arr[i].test(uri))
          return true;
      }
    }
    function toAssume(uri, extns) {
      let i = 0, x, len = uri.length - 1;
      if (uri.charCodeAt(len) === 47) {
        uri = uri.substring(0, len);
      }
      let arr = [], tmp = `${uri}/index`;
      for (; i < extns.length; i++) {
        x = extns[i] ? `.${extns[i]}` : "";
        if (uri)
          arr.push(uri + x);
        arr.push(tmp + x);
      }
      return arr;
    }
    function viaCache(cache, uri, extns) {
      let i = 0, data, arr = toAssume(uri, extns);
      for (; i < arr.length; i++) {
        if (data = cache[arr[i]])
          return data;
      }
    }
    function viaLocal(dir, isEtag, uri, extns) {
      let i = 0, arr = toAssume(uri, extns);
      let abs, stats, name, headers;
      for (; i < arr.length; i++) {
        abs = normalize(join2(dir, name = arr[i]));
        if (abs.startsWith(dir) && fs2.existsSync(abs)) {
          stats = fs2.statSync(abs);
          if (stats.isDirectory())
            continue;
          headers = toHeaders(name, stats, isEtag);
          headers["Cache-Control"] = isEtag ? "no-cache" : "no-store";
          return { abs, stats, headers };
        }
      }
    }
    function is404(req, res) {
      return res.statusCode = 404, res.end();
    }
    function send(req, res, file, stats, headers) {
      let code = 200, tmp, opts = {};
      headers = __spreadValues({}, headers);
      for (let key in headers) {
        tmp = res.getHeader(key);
        if (tmp)
          headers[key] = tmp;
      }
      if (tmp = res.getHeader("content-type")) {
        headers["Content-Type"] = tmp;
      }
      if (req.headers.range) {
        code = 206;
        let [x, y] = req.headers.range.replace("bytes=", "").split("-");
        let end = opts.end = parseInt(y, 10) || stats.size - 1;
        let start = opts.start = parseInt(x, 10) || 0;
        if (start >= stats.size || end >= stats.size) {
          res.setHeader("Content-Range", `bytes */${stats.size}`);
          res.statusCode = 416;
          return res.end();
        }
        headers["Content-Range"] = `bytes ${start}-${end}/${stats.size}`;
        headers["Content-Length"] = end - start + 1;
        headers["Accept-Ranges"] = "bytes";
      }
      res.writeHead(code, headers);
      fs2.createReadStream(file, opts).pipe(res);
    }
    function isEncoding(name, type, headers) {
      headers["Content-Encoding"] = type;
      headers["Content-Type"] = mime.getType(name.replace(/\.([^.]*)$/, "")) || "";
    }
    function toHeaders(name, stats, isEtag) {
      let headers = {
        "Content-Length": stats.size,
        "Content-Type": mime.getType(name) || "",
        "Last-Modified": stats.mtime.toUTCString()
      };
      if (isEtag)
        headers["ETag"] = `W/"${stats.size}-${stats.mtime.getTime()}"`;
      if (/\.br$/.test(name))
        isEncoding(name, "br", headers);
      if (/\.gz$/.test(name))
        isEncoding(name, "gzip", headers);
      return headers;
    }
    module.exports = function(dir, opts = {}) {
      dir = resolve2(dir || ".");
      let isNotFound = opts.onNoMatch || is404;
      let setHeaders = opts.setHeaders || noop;
      let extensions = opts.extensions || ["html", "htm"];
      let gzips = opts.gzip && extensions.map((x) => `${x}.gz`).concat("gz");
      let brots = opts.brotli && extensions.map((x) => `${x}.br`).concat("br");
      const FILES = {};
      let fallback = "/";
      let isEtag = !!opts.etag;
      let isSPA = !!opts.single;
      if (typeof opts.single === "string") {
        let idx = opts.single.lastIndexOf(".");
        fallback += !!~idx ? opts.single.substring(0, idx) : opts.single;
      }
      let ignores = [];
      if (opts.ignores !== false) {
        ignores.push(/[/]([A-Za-z\s\d~$._-]+\.\w+){1,}$/);
        if (opts.dotfiles)
          ignores.push(/\/\.\w/);
        else
          ignores.push(/\/\.well-known/);
        [].concat(opts.ignores || []).forEach((x) => {
          ignores.push(new RegExp(x, "i"));
        });
      }
      let cc = opts.maxAge != null && `public,max-age=${opts.maxAge}`;
      if (cc && opts.immutable)
        cc += ",immutable";
      else if (cc && opts.maxAge === 0)
        cc += ",must-revalidate";
      if (!opts.dev) {
        list(dir, (name, abs, stats) => {
          if (/\.well-known[\\+\/]/.test(name)) {
          } else if (!opts.dotfiles && /(^\.|[\\+|\/+]\.)/.test(name))
            return;
          let headers = toHeaders(name, stats, isEtag);
          if (cc)
            headers["Cache-Control"] = cc;
          FILES["/" + name.normalize().replace(/\\+/g, "/")] = { abs, stats, headers };
        });
      }
      let lookup = opts.dev ? viaLocal.bind(0, dir, isEtag) : viaCache.bind(0, FILES);
      return function(req, res, next) {
        let extns = [""];
        let val = req.headers["accept-encoding"] || "";
        if (gzips && val.includes("gzip"))
          extns.unshift(...gzips);
        if (brots && /(br|brotli)/i.test(val))
          extns.unshift(...brots);
        extns.push(...extensions);
        let pathname = req.path || parse(req, true).pathname;
        let data = lookup(pathname, extns) || isSPA && !isMatch(pathname, ignores) && lookup(fallback, extns);
        if (!data)
          return next ? next() : isNotFound(req, res);
        if (isEtag && req.headers["if-none-match"] === data.headers["ETag"]) {
          res.writeHead(304);
          return res.end();
        }
        if (gzips || brots) {
          res.setHeader("Vary", "Accept-Encoding");
        }
        setHeaders(res, pathname, data.stats);
        send(req, res, data.abs, data.stats, data.headers);
      };
    };
  }
});

// node/build.ts
var import_sirv = __toModule(require_build2());
import { resolve, join } from "path";
import http from "http";
import fs from "fs-extra";
import { build as viteBuild, mergeConfig, resolveConfig } from "vite";
import connect from "connect";
import { blue, yellow } from "kolorist";
async function build(options, viteConfig = {}) {
  const indexPath = resolve(options.userRoot, "index.html");
  const rawConfig = await resolveConfig({}, "build");
  const pluginOptions = rawConfig.slidev || {};
  let originalIndexHTML;
  if (fs.existsSync(indexPath))
    originalIndexHTML = await fs.readFile(indexPath, "utf-8");
  await fs.writeFile(indexPath, await getIndexHtml(options), "utf-8");
  let config = void 0;
  try {
    const inlineConfig = mergeConfig(viteConfig, {
      plugins: [
        await ViteSlidevPlugin(options, pluginOptions),
        {
          name: "resolve-config",
          configResolved(_config) {
            config = _config;
          }
        }
      ]
    });
    await viteBuild(inlineConfig);
    if (options.data.features.monaco) {
      if (options.data.config.monaco === "dev") {
        console.log(yellow("  Monaco is disabled in the build, to enabled it, set `monaco: true` in the frontmatter"));
      } else {
        console.log(blue("  building for Monaco...\n"));
        await viteBuild(mergeConfig(inlineConfig, {
          root: join(options.clientRoot, "iframes/monaco"),
          base: `${config.base}iframes/monaco/`,
          build: {
            outDir: resolve(config.build.outDir, "iframes/monaco"),
            rollupOptions: {
              output: {
                manualChunks: {
                  jsonWorker: ["monaco-editor/esm/vs/language/json/json.worker"],
                  cssWorker: ["monaco-editor/esm/vs/language/css/css.worker"],
                  htmlWorker: ["monaco-editor/esm/vs/language/html/html.worker"],
                  tsWorker: ["monaco-editor/esm/vs/language/typescript/ts.worker"],
                  editorWorker: ["monaco-editor/esm/vs/editor/editor.worker"]
                }
              }
            }
          }
        }));
      }
    }
  } finally {
    if (originalIndexHTML != null)
      await fs.writeFile(indexPath, originalIndexHTML, "utf-8");
    else
      await fs.unlink(indexPath);
  }
  if (options.data.config.download === true || options.data.config.download === "auto") {
    const { exportSlides } = await Promise.resolve().then(() => __toModule(__require("./export-54SBOJ5E.mjs")));
    const port = 12445;
    const app = connect();
    const server = http.createServer(app);
    app.use(config.base, (0, import_sirv.default)(config.build.outDir, {
      etag: true,
      single: true
    }));
    server.listen(port);
    await exportSlides({
      port,
      total: options.data.slides.length,
      format: "pdf",
      output: join(config.build.outDir, "slidev-exported.pdf"),
      base: config.base,
      dark: options.data.config.colorSchema === "dark",
      width: 1920,
      height: Math.round(1920 / options.data.config.aspectRatio)
    });
    server.close();
  }
}
export {
  build
};
