import {
  __spreadValues,
  detectFeatures,
  filterDisabled,
  mergeFeatureFlags,
  parse,
  parseAspectRatio,
  parseRangeString,
  parseSlide,
  prettify,
  prettifySlide,
  resolveConfig,
  resolveFonts,
  scanMonacoModules,
  stringify,
  stringifySlide
} from "./chunk-WPUFEJRV.mjs";

// src/fs.ts
import { promises as fs } from "fs";
import { dirname, resolve } from "path";
async function load(filepath, themeMeta, content) {
  const dir = dirname(filepath);
  const markdown = content != null ? content : await fs.readFile(filepath, "utf-8");
  const data = parse(markdown, filepath, themeMeta);
  const entries = new Set([
    filepath
  ]);
  for (const slide of data.slides) {
    if (!slide.frontmatter.src)
      continue;
    const path = resolve(dir, slide.frontmatter.src);
    const raw = await fs.readFile(path, "utf-8");
    const source = parseSlide(raw);
    const inline = __spreadValues({}, slide);
    slide.source = __spreadValues({
      filepath: path
    }, source);
    slide.inline = inline;
    Object.assign(slide, slide.source);
    slide.frontmatter = __spreadValues(__spreadValues({}, slide.source.frontmatter), inline.frontmatter);
    data.features = mergeFeatureFlags(data.features, detectFeatures(raw));
    entries.add(path);
  }
  data.entries = Array.from(entries);
  return data;
}
async function save(data, filepath) {
  filepath = filepath || data.filepath;
  await fs.writeFile(filepath, stringify(data), "utf-8");
}
async function saveExternalSlide(slide) {
  await fs.writeFile(slide.filepath, stringifySlide(slide), "utf-8");
}
export {
  detectFeatures,
  filterDisabled,
  load,
  mergeFeatureFlags,
  parse,
  parseAspectRatio,
  parseRangeString,
  parseSlide,
  prettify,
  prettifySlide,
  resolveConfig,
  resolveFonts,
  save,
  saveExternalSlide,
  scanMonacoModules,
  stringify,
  stringifySlide
};
