{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['###', '###'],\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*#region\\\\b'),\r\n            end: new RegExp('^\\\\s*#endregion\\\\b')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.coffee',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\r\n    keywords: [\r\n        'and',\r\n        'or',\r\n        'is',\r\n        'isnt',\r\n        'not',\r\n        'on',\r\n        'yes',\r\n        '@',\r\n        'no',\r\n        'off',\r\n        'true',\r\n        'false',\r\n        'null',\r\n        'this',\r\n        'new',\r\n        'delete',\r\n        'typeof',\r\n        'in',\r\n        'instanceof',\r\n        'return',\r\n        'throw',\r\n        'break',\r\n        'continue',\r\n        'debugger',\r\n        'if',\r\n        'else',\r\n        'switch',\r\n        'for',\r\n        'while',\r\n        'do',\r\n        'try',\r\n        'catch',\r\n        'finally',\r\n        'class',\r\n        'extends',\r\n        'super',\r\n        'undefined',\r\n        'then',\r\n        'unless',\r\n        'until',\r\n        'loop',\r\n        'of',\r\n        'by',\r\n        'when'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\r\n            [\r\n                /[a-zA-Z_]\\w*/,\r\n                {\r\n                    cases: {\r\n                        this: 'variable.predefined',\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            // Comments\r\n            [/###/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n            // regular expressions\r\n            ['///', { token: 'regexp', next: '@hereregexp' }],\r\n            [/^(\\s*)(@regEx)/, ['', 'regexp']],\r\n            [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\r\n            // delimiters\r\n            [\r\n                /}/,\r\n                {\r\n                    cases: {\r\n                        '$S2==interpolatedstring': {\r\n                            token: 'string',\r\n                            next: '@pop'\r\n                        },\r\n                        '@default': '@brackets'\r\n                    }\r\n                }\r\n            ],\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/0[0-7]+(?!\\d)/, 'number.octal'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[,.]/, 'delimiter'],\r\n            // strings:\r\n            [/\"\"\"/, 'string', '@herestring.\"\"\"'],\r\n            [/'''/, 'string', \"@herestring.'''\"],\r\n            [\r\n                /\"/,\r\n                {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: '@string.\"' }\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                /'/,\r\n                {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: \"@string.'\" }\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        string: [\r\n            [/[^\"'\\#\\\\]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [\r\n                /#{/,\r\n                {\r\n                    cases: {\r\n                        '$S2==\"': {\r\n                            token: 'string',\r\n                            next: 'root.interpolatedstring'\r\n                        },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                /[\"']/,\r\n                {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            [/#/, 'string']\r\n        ],\r\n        herestring: [\r\n            [\r\n                /(\"\"\"|''')/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            [/[^#\\\\'\"]+/, 'string'],\r\n            [/['\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\r\n            [/#/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^#]+/, 'comment'],\r\n            [/###/, 'comment', '@pop'],\r\n            [/#/, 'comment']\r\n        ],\r\n        hereregexp: [\r\n            [/[^\\\\\\/#]+/, 'regexp'],\r\n            [/\\\\./, 'regexp'],\r\n            [/#.*$/, 'comment'],\r\n            ['///[igm]*', { token: 'regexp', next: '@pop' }],\r\n            [/\\//, 'regexp']\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
