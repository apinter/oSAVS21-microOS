{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    // the default separators except `@$`\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['{', '}']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\r\n            end: new RegExp('^\\\\s*\\\\{\\\\$ENDREGION\\\\}')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.pascal',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'absolute',\r\n        'abstract',\r\n        'all',\r\n        'and_then',\r\n        'array',\r\n        'as',\r\n        'asm',\r\n        'attribute',\r\n        'begin',\r\n        'bindable',\r\n        'case',\r\n        'class',\r\n        'const',\r\n        'contains',\r\n        'default',\r\n        'div',\r\n        'else',\r\n        'end',\r\n        'except',\r\n        'exports',\r\n        'external',\r\n        'far',\r\n        'file',\r\n        'finalization',\r\n        'finally',\r\n        'forward',\r\n        'generic',\r\n        'goto',\r\n        'if',\r\n        'implements',\r\n        'import',\r\n        'in',\r\n        'index',\r\n        'inherited',\r\n        'initialization',\r\n        'interrupt',\r\n        'is',\r\n        'label',\r\n        'library',\r\n        'mod',\r\n        'module',\r\n        'name',\r\n        'near',\r\n        'not',\r\n        'object',\r\n        'of',\r\n        'on',\r\n        'only',\r\n        'operator',\r\n        'or_else',\r\n        'otherwise',\r\n        'override',\r\n        'package',\r\n        'packed',\r\n        'pow',\r\n        'private',\r\n        'program',\r\n        'protected',\r\n        'public',\r\n        'published',\r\n        'interface',\r\n        'implementation',\r\n        'qualified',\r\n        'read',\r\n        'record',\r\n        'resident',\r\n        'requires',\r\n        'resourcestring',\r\n        'restricted',\r\n        'segment',\r\n        'set',\r\n        'shl',\r\n        'shr',\r\n        'specialize',\r\n        'stored',\r\n        'then',\r\n        'threadvar',\r\n        'to',\r\n        'try',\r\n        'type',\r\n        'unit',\r\n        'uses',\r\n        'var',\r\n        'view',\r\n        'virtual',\r\n        'dynamic',\r\n        'overload',\r\n        'reintroduce',\r\n        'with',\r\n        'write',\r\n        'xor',\r\n        'true',\r\n        'false',\r\n        'procedure',\r\n        'function',\r\n        'constructor',\r\n        'destructor',\r\n        'property',\r\n        'break',\r\n        'continue',\r\n        'exit',\r\n        'abort',\r\n        'while',\r\n        'do',\r\n        'for',\r\n        'raise',\r\n        'repeat',\r\n        'until'\r\n    ],\r\n    typeKeywords: [\r\n        'boolean',\r\n        'double',\r\n        'byte',\r\n        'integer',\r\n        'shortint',\r\n        'char',\r\n        'longint',\r\n        'float',\r\n        'string'\r\n    ],\r\n    operators: [\r\n        '=',\r\n        '>',\r\n        '<',\r\n        '<=',\r\n        '>=',\r\n        '<>',\r\n        ':',\r\n        ':=',\r\n        'and',\r\n        'or',\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '@',\r\n        '&',\r\n        '^',\r\n        '%'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_][\\w]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^\\*\\}]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\}/, 'comment', '@pop'],\r\n            [/[\\{]/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\{/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ]\r\n    }\r\n};\r\n"],
  "mappings": ";;;AAIO,IAAI,OAAO;AAAA,EAEd,aAAa;AAAA,EACb,UAAU;AAAA,IACN,aAAa;AAAA,IACb,cAAc,CAAC,KAAK;AAAA;AAAA,EAExB,UAAU;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA;AAAA,EAEV,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA,EAExB,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA,EAExB,SAAS;AAAA,IACL,SAAS;AAAA,MACL,OAAO,IAAI,OAAO;AAAA,MAClB,KAAK,IAAI,OAAO;AAAA;AAAA;AAAA;AAIrB,IAAI,WAAW;AAAA,EAClB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,UAAU;AAAA,IACN,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,IAChC,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,IAChC,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,IAChC,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA;AAAA,EAEpcAAc;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EAEJ,WAAW;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EAGJ,SAAS;AAAA,EAET,WAAW;AAAA,IACP,MAAM;AAAA,MAEF;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,aAAa,EAAE,OAAO;AAAA,YACtB,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB,EAAE,SAAS;AAAA,MAEX,CAAC,cAAc;AAAA,MACf,CAAC,oBAAoB;AAAA,MACrB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,cAAc;AAAA,YACd,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB,CAAC,4BAA4B;AAAA,MAC7B,CAAC,uBAAuB;AAAA,MACxB,CAAC,OAAO;AAAA,MAER,CAAC,SAAS;AAAA,MAEV,CAAC,mBAAmB;AAAA,MACpB,CAAC,KAAK,UAAU;AAAA,MAEhB,CAAC,YAAY;AAAA,MACb,CAAC,KAAK;AAAA,MACN,CAAC,SAAS;AAAA;AAAA,IAEd,SAAS;AAAA,MACL,CAAC,YAAY;AAAA,MAEb,CAAC,MAAM,WAAW;AAAA,MAClB,CAAC,QAAQ;AAAA;AAAA,IAEb,QAAQ;AAAA,MACJ,CAAC,WAAW;AAAA,MACZ,CAAC,OAAO;AAAA,MACR,CAAC,KAAK,EAAE,OAAO,gBAAgB,SAAS,UAAU,MAAM;AAAA;AAAA,IAE5D,YAAY;AAAA,MACR,CAAC,cAAc;AAAA,MACf,CAAC,MAAM,WAAW;AAAA,MAClB,CAAC,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
