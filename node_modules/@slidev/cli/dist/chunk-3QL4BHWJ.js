"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }









var _chunkKRCSYS75js = require('./chunk-KRCSYS75.js');

// ../../node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = _chunkKRCSYS75js.__commonJS.call(void 0, {
  "../../node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal2(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal2(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal2(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node/common.ts
var _fs = require('fs');
var _path = require('path');
var _utils = require('@antfu/utils');
async function getIndexHtml({ clientRoot, themeRoots, data, userRoot }) {
  var _a, _b;
  let main = await _fs.promises.readFile(_path.join.call(void 0, clientRoot, "index.html"), "utf-8");
  let head = "";
  let body = "";
  const roots = _utils.uniq.call(void 0, [
    ...themeRoots,
    userRoot
  ]);
  for (const root of roots) {
    const path = _path.join.call(void 0, root, "index.html");
    if (!_fs.existsSync.call(void 0, path))
      continue;
    const index = await _fs.promises.readFile(path, "utf-8");
    head += `
${(((_a = index.match(/<head>([\s\S]*?)<\/head>/im)) == null ? void 0 : _a[1]) || "").trim()}`;
    body += `
${(((_b = index.match(/<body>([\s\S]*?)<\/body>/im)) == null ? void 0 : _b[1]) || "").trim()}`;
  }
  if (data.features.tweet)
    body += '\n<script async src="https://platform.twitter.com/widgets.js"><\/script>';
  if (data.config.fonts.webfonts.length && data.config.fonts.provider !== "none")
    head += `
<link rel="stylesheet" href="${_chunkKRCSYS75js.generateGoogleFontsUrl.call(void 0, data.config.fonts)}" type="text/css">`;
  main = main.replace("__ENTRY__", _chunkKRCSYS75js.toAtFS.call(void 0, _path.join.call(void 0, clientRoot, "main.ts"))).replace("<!-- head -->", head).replace("<!-- body -->", body);
  return main;
}

// node/plugins/windicss.ts



var _vitepluginwindicss = require('vite-plugin-windicss'); var _vitepluginwindicss2 = _interopRequireDefault(_vitepluginwindicss);

// node/plugins/jiti.ts
var _jiti2 = require('jiti'); var _jiti3 = _interopRequireDefault(_jiti2);
var jiti = _jiti3.default.call(void 0, __filename);

// node/plugins/setupNode.ts

var _fsextra = require('fs-extra'); var _fsextra2 = _interopRequireDefault(_fsextra);

function deepMerge(a, b, rootPath = "") {
  a = _chunkKRCSYS75js.__spreadValues.call(void 0, {}, a);
  Object.keys(b).forEach((key) => {
    if (_utils.isObject.call(void 0, a[key]))
      a[key] = deepMerge(a[key], b[key], rootPath ? `${rootPath}.${key}` : key);
    else if (Array.isArray(a[key]))
      a[key] = [...a[key], ...b[key]];
    else
      a[key] = b[key];
  });
  return a;
}
async function loadSetups(roots, name, arg, initial, merge = true) {
  let returns = initial;
  for (const root of roots) {
    const path = _path.resolve.call(void 0, root, "setup", name);
    if (_fsextra.existsSync.call(void 0, path)) {
      const { default: setup } = jiti(path);
      const result = await setup(arg);
      if (result !== null) {
        returns = merge ? deepMerge(returns, result) : result;
      }
    }
  }
  return returns;
}

// node/plugins/windicss.ts
async function createWindiCSSPlugin({ themeRoots, clientRoot, userRoot, roots, data }, { windicss: windiOptions }) {
  const configFiles = _utils.uniq.call(void 0, [
    ..._vitepluginwindicss.defaultConfigureFiles.map((i) => _path.resolve.call(void 0, userRoot, i)),
    ...themeRoots.map((i) => `${i}/windi.config.ts`),
    _path.resolve.call(void 0, clientRoot, "windi.config.ts")
  ]);
  const configFile = configFiles.find((i) => _fs.existsSync.call(void 0, i));
  let config = jiti(configFile);
  if (config.default)
    config = config.default;
  config = await loadSetups(roots, "windicss.ts", {}, config, true);
  return _vitepluginwindicss2.default.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {
    configFiles: [configFile],
    config,
    onConfigResolved(config2) {
      if (!config2.theme)
        config2.theme = {};
      if (!config2.theme.extend)
        config2.theme.extend = {};
      if (!config2.theme.extend.fontFamily)
        config2.theme.extend.fontFamily = {};
      const fontFamily = config2.theme.extend.fontFamily;
      fontFamily.sans || (fontFamily.sans = data.config.fonts.sans.join(","));
      fontFamily.mono || (fontFamily.mono = data.config.fonts.mono.join(","));
      fontFamily.serif || (fontFamily.serif = data.config.fonts.serif.join(","));
      return config2;
    },
    onOptionsResolved(config2) {
      themeRoots.forEach((i) => {
        config2.scanOptions.include.push(`${i}/components/*.{vue,ts}`);
        config2.scanOptions.include.push(`${i}/layouts/*.{vue,ts}`);
      });
      config2.scanOptions.include.push(`!${_utils.slash.call(void 0, _path.resolve.call(void 0, userRoot, "node_modules"))}`);
      config2.scanOptions.exclude.push(_path.dirname.call(void 0, _chunkKRCSYS75js.resolveImportPath.call(void 0, "monaco-editor/package.json", true)));
      config2.scanOptions.exclude.push(_path.dirname.call(void 0, _chunkKRCSYS75js.resolveImportPath.call(void 0, "katex/package.json", true)));
      config2.scanOptions.exclude.push(_path.dirname.call(void 0, _chunkKRCSYS75js.resolveImportPath.call(void 0, "prettier/package.json", true)));
    }
  }, windiOptions));
}

// node/plugins/preset.ts
var _pluginvue = require('@vitejs/plugin-vue'); var _pluginvue2 = _interopRequireDefault(_pluginvue);
var _vitepluginicons = require('vite-plugin-icons'); var _vitepluginicons2 = _interopRequireDefault(_vitepluginicons);
var _viteplugincomponents = require('vite-plugin-components'); var _viteplugincomponents2 = _interopRequireDefault(_viteplugincomponents);
var _vitepluginremoteassets = require('vite-plugin-remote-assets'); var _vitepluginremoteassets2 = _interopRequireDefault(_vitepluginremoteassets);


// node/plugins/config.ts

var _vite = require('vite');
var _isinstalledglobally = require('is-installed-globally'); var _isinstalledglobally2 = _interopRequireDefault(_isinstalledglobally);

// ../client/package.json
var dependencies = {
  "@antfu/utils": "^0.2.4",
  "@slidev/parser": "workspace:*",
  "@slidev/types": "workspace:*",
  "@vueuse/core": "^5.1.4",
  "@vueuse/head": "^0.6.0",
  "@vueuse/motion": "^1.5.6",
  codemirror: "^5.62.2",
  "file-saver": "^2.0.5",
  "js-base64": "^3.6.1",
  "js-yaml": "^4.1.0",
  katex: "^0.13.13",
  mermaid: "8.5.0",
  "monaco-editor": "^0.26.1",
  nanoid: "^3.1.23",
  prettier: "^2.3.2",
  recordrtc: "^5.6.2",
  resolve: "^1.20.0",
  "vite-plugin-windicss": "^1.2.5",
  vue: "^3.1.5",
  "vue-router": "^4.0.10",
  windicss: "^3.1.5"
};

// node/plugins/config.ts
var EXCLUDE = [
  "@slidev/shared",
  "@slidev/types",
  "@vueuse/core",
  "@vueuse/shared",
  "mermaid",
  "vite-plugin-windicss",
  "vue-demi"
];
function createConfigPlugin(options) {
  return {
    name: "slidev:config",
    config(config) {
      const injection = {
        define: {
          __SLIDEV_CLIENT_ROOT__: JSON.stringify(_chunkKRCSYS75js.toAtFS.call(void 0, options.clientRoot)),
          __SLIDEV_HASH_ROUTE__: options.data.config.routerMode === "hash",
          __DEV__: options.mode === "dev" ? "true" : "false"
        },
        resolve: {
          alias: {
            "@slidev/client/": `${_chunkKRCSYS75js.toAtFS.call(void 0, options.clientRoot)}/`
          }
        },
        optimizeDeps: {
          include: [
            ...Object.keys(dependencies).filter((i) => !EXCLUDE.includes(i)),
            "codemirror/mode/javascript/javascript",
            "codemirror/mode/css/css",
            "codemirror/mode/markdown/markdown",
            "codemirror/mode/xml/xml",
            "codemirror/mode/htmlmixed/htmlmixed",
            "codemirror/addon/display/placeholder",
            "prettier/esm/parser-babel",
            "prettier/esm/parser-html",
            "prettier/esm/parser-typescript",
            "mermaid/dist/mermaid.min"
          ],
          exclude: EXCLUDE
        },
        server: {
          fs: {
            strict: true
          }
        }
      };
      if (_isinstalledglobally2.default) {
        injection.cacheDir = _path.join.call(void 0, options.cliRoot, "node_modules/.vite");
        injection.root = options.cliRoot;
        injection.resolve.alias.vue = `${_chunkKRCSYS75js.resolveImportPath.call(void 0, "vue/dist/vue.esm-browser.js", true)}`;
      }
      return _vite.mergeConfig.call(void 0, config, injection);
    },
    configureServer(server) {
      return () => {
        server.middlewares.use(async (req, res, next) => {
          if (req.url.endsWith(".html")) {
            res.statusCode = 200;
            res.end(await getIndexHtml(options));
            return;
          }
          next();
        });
      };
    }
  };
}

// node/plugins/loaders.ts
var import_fast_deep_equal = _chunkKRCSYS75js.__toModule.call(void 0, require_fast_deep_equal());


var _fastglob = require('fast-glob'); var _fastglob2 = _interopRequireDefault(_fastglob);

var _markdownit = require('markdown-it'); var _markdownit2 = _interopRequireDefault(_markdownit);
var _markdownitlinkattributes = require('markdown-it-link-attributes'); var _markdownitlinkattributes2 = _interopRequireDefault(_markdownitlinkattributes);





var _fs3 = require('@slidev/parser/fs');
var regexId = /^\/\@slidev\/slide\/(\d+)\.(md|json)(?:\?import)?$/;
var regexIdQuery = /(\d+?)\.(md|json)$/;
function getBodyJson(req) {
  return new Promise((resolve4, reject) => {
    let body = "";
    req.on("data", (chunk) => body += chunk);
    req.on("error", reject);
    req.on("end", () => {
      try {
        resolve4(JSON.parse(body) || {});
      } catch (e) {
        reject(e);
      }
    });
  });
}
var md = _markdownit2.default.call(void 0, { html: true });
md.use(_markdownitlinkattributes2.default, {
  attrs: {
    target: "_blank",
    rel: "noopener"
  }
});
function prepareSlideInfo(data) {
  return _chunkKRCSYS75js.__spreadProps.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {}, data), {
    notesHTML: md.render((data == null ? void 0 : data.note) || "")
  });
}
function createSlidesLoader({ data, entry, clientRoot, themeRoots, userRoot, roots }, pluginOptions, serverOptions, VuePlugin, MarkdownPlugin) {
  const slidePrefix = "/@slidev/slides/";
  const hmrPages = new Set();
  let server;
  let _layouts_cache_time = 0;
  let _layouts_cache = {};
  return [
    {
      name: "slidev:loader",
      configureServer(_server) {
        server = _server;
        updateServerWatcher();
        server.middlewares.use(async (req, res, next) => {
          var _a;
          const match = (_a = req.url) == null ? void 0 : _a.match(regexId);
          if (!match)
            return next();
          const [, no, type] = match;
          const idx = parseInt(no);
          if (type === "json" && req.method === "GET") {
            res.write(JSON.stringify(prepareSlideInfo(data.slides[idx])));
            return res.end();
          }
          if (type === "json" && req.method === "POST") {
            const body = await getBodyJson(req);
            const slide = data.slides[idx];
            hmrPages.add(idx);
            if (slide.source) {
              Object.assign(slide.source, body);
              await _fs3.saveExternalSlide.call(void 0, slide.source);
            } else {
              Object.assign(slide, body);
              await _fs3.save.call(void 0, data, entry);
            }
            res.statusCode = 200;
            return res.end();
          }
          next();
        });
      },
      async handleHotUpdate(ctx) {
        var _a;
        if (!data.entries.some((i) => _utils.slash.call(void 0, i) === ctx.file))
          return;
        const newData = await _fs3.load.call(void 0, entry, data.themeMeta);
        const moduleIds = new Set();
        if (data.slides.length !== newData.slides.length) {
          moduleIds.add("/@slidev/routes");
          _utils.range.call(void 0, newData.slides.length).map((i) => hmrPages.add(i));
        }
        if (!(0, import_fast_deep_equal.default)(data.headmatter.defaults, newData.headmatter.defaults)) {
          moduleIds.add("/@slidev/routes");
          _utils.range.call(void 0, data.slides.length).map((i) => hmrPages.add(i));
        }
        if (!(0, import_fast_deep_equal.default)(data.config, newData.config))
          moduleIds.add("/@slidev/configs");
        if (!(0, import_fast_deep_equal.default)(data.features, newData.features)) {
          setTimeout(() => {
            ctx.server.ws.send({ type: "full-reload" });
          }, 1);
        }
        const length = Math.max(data.slides.length, newData.slides.length);
        for (let i = 0; i < length; i++) {
          if (hmrPages.has(i))
            continue;
          const a = data.slides[i];
          const b = newData.slides[i];
          if ((a == null ? void 0 : a.content.trim()) === (b == null ? void 0 : b.content.trim()) && (0, import_fast_deep_equal.default)(a.frontmatter, b.frontmatter))
            continue;
          ctx.server.ws.send({
            type: "custom",
            event: "slidev-update",
            data: {
              id: i,
              data: prepareSlideInfo(newData.slides[i])
            }
          });
          hmrPages.add(i);
        }
        (_a = serverOptions.onDataReload) == null ? void 0 : _a.call(serverOptions, newData, data);
        Object.assign(data, newData);
        const vueModules = (await Promise.all(Array.from(hmrPages).map(async (i) => {
          var _a2;
          const file = `${slidePrefix}${i + 1}.md`;
          try {
            const md2 = await transformMarkdown(MarkdownPlugin.transform((_a2 = newData.slides[i]) == null ? void 0 : _a2.content, file), i, newData);
            return await VuePlugin.handleHotUpdate(_chunkKRCSYS75js.__spreadProps.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {}, ctx), {
              modules: Array.from(ctx.server.moduleGraph.getModulesByFile(file) || []),
              file,
              read() {
                return md2;
              }
            }));
          } catch (e2) {
          }
        }))).flatMap((i) => i || []);
        hmrPages.clear();
        const moduleEntries = [
          ...vueModules,
          ...Array.from(moduleIds).map((id) => ctx.server.moduleGraph.getModuleById(id))
        ].filter(_utils.notNullish).filter((i) => {
          var _a2;
          return !((_a2 = i.id) == null ? void 0 : _a2.startsWith("/@id/@vite-icons"));
        });
        updateServerWatcher();
        return moduleEntries;
      },
      resolveId(id) {
        if (id.startsWith(slidePrefix) || id.startsWith("/@slidev/"))
          return id;
        return null;
      },
      load(id) {
        var _a;
        if (id === "/@slidev/routes")
          return generateRoutes();
        if (id === "/@slidev/layouts")
          return generateLayouts();
        if (id === "/@slidev/styles")
          return generateUserStyles();
        if (id === "/@slidev/monaco-types")
          return generateMonacoTypes();
        if (id === "/@slidev/configs")
          return generateConfigs();
        if (id === "/@slidev/global-components/top")
          return generateGlobalComponents("top");
        if (id === "/@slidev/global-components/bottom")
          return generateGlobalComponents("bottom");
        if (id.startsWith(slidePrefix)) {
          const remaning = id.slice(slidePrefix.length);
          const match = remaning.match(regexIdQuery);
          if (match) {
            const [, no, type] = match;
            const pageNo = parseInt(no) - 1;
            if (type === "md")
              return (_a = data.slides[pageNo]) == null ? void 0 : _a.content;
          }
          return "";
        }
      }
    },
    {
      name: "slidev:layout-transform:pre",
      enforce: "pre",
      async transform(code, id) {
        if (!id.startsWith(slidePrefix))
          return;
        const remaning = id.slice(slidePrefix.length);
        const match = remaning.match(regexIdQuery);
        if (!match)
          return;
        const [, no, type] = match;
        if (type !== "md")
          return;
        const pageNo = parseInt(no) - 1;
        return transformMarkdown(code, pageNo, data);
      }
    }
  ];
  function updateServerWatcher() {
    var _a;
    if (!server)
      return;
    server.watcher.add(((_a = data.entries) == null ? void 0 : _a.map(_utils.slash)) || []);
  }
  async function transformMarkdown(code, pageNo, data2) {
    var _a, _b;
    const layouts = await getLayouts();
    const frontmatter = _chunkKRCSYS75js.__spreadValues.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {}, ((_a = data2.headmatter) == null ? void 0 : _a.defaults) || {}), ((_b = data2.slides[pageNo]) == null ? void 0 : _b.frontmatter) || {});
    const layoutName = (frontmatter == null ? void 0 : frontmatter.layout) || (pageNo === 0 ? "cover" : "default");
    if (!layouts[layoutName])
      throw new Error(`Unknown layout "${layoutName}"`);
    const imports = [
      `import InjectedLayout from "${_chunkKRCSYS75js.toAtFS.call(void 0, layouts[layoutName])}"`,
      `const frontmatter = ${JSON.stringify(frontmatter)}`
    ];
    code = code.replace(/(<script setup.*>)/g, `$1
${imports.join("\n")}
`);
    const injectA = code.indexOf("<template>") + "<template>".length;
    const injectB = code.lastIndexOf("</template>");
    let body = code.slice(injectA, injectB).trim();
    if (body.startsWith("<div>") && body.endsWith("</div>"))
      body = body.slice(5, -6);
    code = `${code.slice(0, injectA)}
<InjectedLayout v-bind="frontmatter">
${body}
</InjectedLayout>
${code.slice(injectB)}`;
    return code;
  }
  async function getLayouts() {
    const now = Date.now();
    if (now - _layouts_cache_time < 2e3)
      return _layouts_cache;
    const layouts = {};
    const roots2 = _utils.uniq.call(void 0, [
      userRoot,
      ...themeRoots,
      clientRoot
    ]);
    for (const root of roots2) {
      const layoutPaths = await _fastglob2.default.call(void 0, "layouts/*.{vue,ts}", {
        cwd: root,
        absolute: true
      });
      for (const layoutPath of layoutPaths) {
        const layout = _path.basename.call(void 0, layoutPath).replace(/\.\w+$/, "");
        if (layouts[layout])
          continue;
        layouts[layout] = layoutPath;
      }
    }
    _layouts_cache_time = now;
    _layouts_cache = layouts;
    return layouts;
  }
  async function generateUserStyles() {
    const imports = [
      `import "${_chunkKRCSYS75js.toAtFS.call(void 0, _path.join.call(void 0, clientRoot, "styles/vars.css"))}"`,
      `import "${_chunkKRCSYS75js.toAtFS.call(void 0, _path.join.call(void 0, clientRoot, "styles/index.css"))}"`,
      `import "${_chunkKRCSYS75js.toAtFS.call(void 0, _path.join.call(void 0, clientRoot, "styles/code.css"))}"`
    ];
    const roots2 = _utils.uniq.call(void 0, [
      ...themeRoots,
      userRoot
    ]);
    for (const root of roots2) {
      const styles = [
        _path.join.call(void 0, root, "styles", "index.ts"),
        _path.join.call(void 0, root, "styles", "index.js"),
        _path.join.call(void 0, root, "styles", "index.css"),
        _path.join.call(void 0, root, "styles.css"),
        _path.join.call(void 0, root, "style.css")
      ];
      for (const style of styles) {
        if (_fsextra.existsSync.call(void 0, style)) {
          imports.push(`import "${_chunkKRCSYS75js.toAtFS.call(void 0, style)}"`);
          continue;
        }
      }
    }
    if (data.features.katex)
      imports.push(`import "${_chunkKRCSYS75js.toAtFS.call(void 0, _chunkKRCSYS75js.resolveImportPath.call(void 0, "katex/dist/katex.min.css", true))}"`);
    return imports.join("\n");
  }
  async function generateMonacoTypes() {
    return `void 0; ${_fs3.scanMonacoModules.call(void 0, data.raw).map((i) => `import('/@slidev-monaco-types/${i}')`).join("\n")}`;
  }
  async function generateLayouts() {
    const imports = [];
    const layouts = _utils.objectMap.call(void 0, await getLayouts(), (k, v) => {
      imports.push(`import __layout_${k} from "${_chunkKRCSYS75js.toAtFS.call(void 0, v)}"`);
      return [k, `__layout_${k}`];
    });
    return [
      imports.join("\n"),
      `export default {
${Object.entries(layouts).map(([k, v]) => `"${k}": ${v}`).join(",\n")}
}`
    ].join("\n\n");
  }
  async function generateRoutes() {
    const imports = [];
    const layouts = await getLayouts();
    imports.push(`import __layout__end from '${layouts.end}'`);
    let no = 1;
    const routes = [
      ...data.slides.map((i, idx) => {
        var _a, _b;
        if ((_a = i.frontmatter) == null ? void 0 : _a.disabled)
          return void 0;
        imports.push(`import n${no} from '${slidePrefix}${idx + 1}.md'`);
        const additions = {
          slide: {
            start: i.start,
            end: i.end,
            note: i.note,
            filepath: ((_b = i.source) == null ? void 0 : _b.filepath) || entry,
            id: idx,
            no
          },
          __clicksElements: [],
          __preloaded: false
        };
        const meta = Object.assign({}, i.frontmatter, additions);
        const route = `{ path: '${no}', name: 'page-${no}', component: n${no}, meta: ${JSON.stringify(meta)} }`;
        no += 1;
        return route;
      }).filter(_utils.notNullish),
      `{ path: "${no}", component: __layout__end, meta: { layout: "end" } }`
    ];
    const routesStr = `export default [
${routes.join(",\n")}
]`;
    return [...imports, routesStr].join("\n");
  }
  function generateConfigs() {
    const config = _chunkKRCSYS75js.__spreadValues.call(void 0, {}, data.config);
    if (_utils.isString.call(void 0, config.title)) {
      const tokens = md.parseInline(config.title, {});
      config.title = _chunkKRCSYS75js.stringifyMarkdownTokens.call(void 0, tokens);
    }
    if (_utils.isString.call(void 0, config.info))
      config.info = md.render(config.info);
    return `export default ${JSON.stringify(config)}`;
  }
  async function generateGlobalComponents(layer) {
    const components = roots.flatMap((root) => {
      if (layer === "top") {
        return [
          _path.join.call(void 0, root, "global.vue"),
          _path.join.call(void 0, root, "global-top.vue"),
          _path.join.call(void 0, root, "GlobalTop.vue")
        ];
      } else {
        return [
          _path.join.call(void 0, root, "global-bottom.vue"),
          _path.join.call(void 0, root, "GlobalBottom.vue")
        ];
      }
    }).filter((i) => _fsextra2.default.existsSync(i));
    const imports = components.map((i, idx) => `import __n${idx} from '${_chunkKRCSYS75js.toAtFS.call(void 0, i)}'`).join("\n");
    const render = components.map((i, idx) => `h(__n${idx})`).join(",");
    return `
${imports}
import { h } from 'vue'
export default {
  render() {
    return [${render}]
  }
}
`;
  }
}

// node/plugins/monaco.ts



function createMonacoTypesLoader() {
  return {
    name: "slidev:monaco-types-loader",
    resolveId(id) {
      if (id.startsWith("/@slidev-monaco-types/"))
        return id;
      return null;
    },
    load(id) {
      const match = id.match(/^\/\@slidev-monaco-types\/(.*)$/);
      if (match) {
        const pkg = match[1];
        const info = _vite.resolvePackageData.call(void 0, pkg, process.cwd());
        if (!info)
          return;
        const typePath = info.data.types || info.data.typings;
        if (!typePath)
          return "";
        return [
          "import * as monaco from 'monaco-editor'",
          `import Type from "${_utils.slash.call(void 0, _path.join.call(void 0, info.dir, typePath))}?raw"`,
          ...Object.keys(info.data.dependencies || {}).map((i) => `import "/@slidev-monaco-types/${i}"`),
          `monaco.languages.typescript.typescriptDefaults.addExtraLib(\`declare module "${pkg}" { \${Type} }\`)`
        ].join("\n");
      }
    }
  };
}

// node/plugins/setupClient.ts



function createClientSetupPlugin({ clientRoot, themeRoots, userRoot }) {
  const setupEntry = _utils.slash.call(void 0, _path.resolve.call(void 0, clientRoot, "setup"));
  return {
    name: "slidev:setup",
    enforce: "pre",
    async transform(code, id) {
      if (id.startsWith(setupEntry)) {
        const name = id.slice(setupEntry.length + 1);
        const imports = [];
        const injections = [];
        const asyncInjections = [];
        const setups = _utils.uniq.call(void 0, [
          ...themeRoots,
          userRoot
        ]).map((i) => _path.join.call(void 0, i, "setup", name));
        setups.forEach((path, idx) => {
          if (!_fs.existsSync.call(void 0, path))
            return;
          imports.push(`import __n${idx} from '${_chunkKRCSYS75js.toAtFS.call(void 0, path)}'`);
          let fn = `__n${idx}`;
          let awaitFn = `await __n${idx}`;
          if (/\binjection_return\b/g.test(code)) {
            fn = `injection_return = ${fn}`;
            awaitFn = `injection_return = ${awaitFn}`;
          }
          if (/\binjection_arg\b/g.test(code)) {
            fn += "(injection_arg)";
            awaitFn += "(injection_arg)";
          } else {
            fn += "()";
            awaitFn += "()";
          }
          injections.push(`// ${path}`, fn);
          asyncInjections.push(`// ${path}`, awaitFn);
        });
        code = code.replace("/* __imports__ */", imports.join("\n"));
        code = code.replace("/* __injections__ */", injections.join("\n"));
        code = code.replace("/* __async_injections__ */", asyncInjections.join("\n"));
        return code;
      }
      return null;
    }
  };
}

// node/plugins/server-ref.ts
var PREFIX = "/@server-ref/";
function VitePluginServerRef(options = {}) {
  const {
    dataMap = {},
    debounceMs = 10,
    debug = true
  } = options;
  return {
    name: "vite-plugin-server-ref",
    resolveId(id) {
      return id.startsWith(PREFIX) ? id : null;
    },
    configureServer(server) {
      server.middlewares.use(async (req, res, next) => {
        var _a, _b;
        if (!((_a = req.url) == null ? void 0 : _a.startsWith(PREFIX)) || req.method !== "POST")
          return next();
        const name = req.url.slice(PREFIX.length);
        const { data, timestamp } = await getBodyJson(req);
        const module = server.moduleGraph.getModuleById(PREFIX + name);
        if (module)
          server.moduleGraph.invalidateModule(module);
        dataMap[name] = data;
        server.ws.send({
          type: "custom",
          event: "server-ref",
          data: {
            name,
            data,
            timestamp
          }
        });
        (_b = options.onChanged) == null ? void 0 : _b.call(options, name, data, timestamp);
        res.write("");
        res.end();
      });
    },
    load(id) {
      var _a;
      if (!id.startsWith(PREFIX))
        return;
      const name = id.slice(PREFIX.length);
      return `
import { ref, watch } from "vue"

const data = ref(${JSON.stringify((_a = dataMap[name]) != null ? _a : null)})

if (import.meta.hot) {
  ${debug ? `console.log("[server-ref] [${name}] ref", data)` : ""}
  ${debug ? `console.log("[server-ref] [${name}] initial", data.value)` : ""}

  let skipNext = false
  let timer = null
  import.meta.hot.on("server-ref", (payload) =>{
    if (payload.name !== "${name}")
      return
    skipNext = true
    data.value = payload.data
    ${debug ? `console.log("[server-ref] [${name}] incoming", payload.data)` : ""}
  })
  watch(data, (v) => {
    if (skipNext) {
      skipNext = false
      return
    }
    if (timer)
      clearTimeout(timer)

    timer = setTimeout(()=>{
      ${debug ? `console.log("[server-ref] [${name}] outgoing", data.value)` : ""}
      fetch('${PREFIX + name}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: data.value,
          timestamp: Date.now(),
        })
      })
    }, ${debounceMs})
  }, { flush: 'sync', deep: true })
}

export default data
`;
    }
  };
}
var server_ref_default = VitePluginServerRef;

// node/plugins/markdown.ts
var _vitepluginmd = require('vite-plugin-md'); var _vitepluginmd2 = _interopRequireDefault(_vitepluginmd);
var _jsbase64 = require('js-base64'); var _jsbase642 = _interopRequireDefault(_jsbase64);


var _markdownitfootnote = require('markdown-it-footnote'); var _markdownitfootnote2 = _interopRequireDefault(_markdownitfootnote);
var _shiki = require('shiki'); var Shiki = _interopRequireWildcard(_shiki);

// node/plugins/markdown-it-katex.ts
var _katex = require('katex'); var _katex2 = _interopRequireDefault(_katex);
function isValidDelim(state, pos) {
  const max = state.posMax;
  let can_open = true;
  let can_close = true;
  const prevChar = pos > 0 ? state.src.charCodeAt(pos - 1) : -1;
  const nextChar = pos + 1 <= max ? state.src.charCodeAt(pos + 1) : -1;
  if (prevChar === 32 || prevChar === 9 || nextChar >= 48 && nextChar <= 57)
    can_close = false;
  if (nextChar === 32 || nextChar === 9)
    can_open = false;
  return {
    can_open,
    can_close
  };
}
function math_inline(state, silent) {
  let match, token, res, pos;
  if (state.src[state.pos] !== "$")
    return false;
  res = isValidDelim(state, state.pos);
  if (!res.can_open) {
    if (!silent)
      state.pending += "$";
    state.pos += 1;
    return true;
  }
  const start = state.pos + 1;
  match = start;
  while ((match = state.src.indexOf("$", match)) !== -1) {
    pos = match - 1;
    while (state.src[pos] === "\\")
      pos -= 1;
    if ((match - pos) % 2 === 1)
      break;
    match += 1;
  }
  if (match === -1) {
    if (!silent)
      state.pending += "$";
    state.pos = start;
    return true;
  }
  if (match - start === 0) {
    if (!silent)
      state.pending += "$$";
    state.pos = start + 1;
    return true;
  }
  res = isValidDelim(state, match);
  if (!res.can_close) {
    if (!silent)
      state.pending += "$";
    state.pos = start;
    return true;
  }
  if (!silent) {
    token = state.push("math_inline", "math", 0);
    token.markup = "$";
    token.content = state.src.slice(start, match);
  }
  state.pos = match + 1;
  return true;
}
function math_block(state, start, end, silent) {
  let firstLine;
  let lastLine;
  let next;
  let lastPos;
  let found = false;
  let pos = state.bMarks[start] + state.tShift[start];
  let max = state.eMarks[start];
  if (pos + 2 > max)
    return false;
  if (state.src.slice(pos, pos + 2) !== "$$")
    return false;
  pos += 2;
  firstLine = state.src.slice(pos, max);
  if (silent)
    return true;
  if (firstLine.trim().slice(-2) === "$$") {
    firstLine = firstLine.trim().slice(0, -2);
    found = true;
  }
  for (next = start; !found; ) {
    next++;
    if (next >= end)
      break;
    pos = state.bMarks[next] + state.tShift[next];
    max = state.eMarks[next];
    if (pos < max && state.tShift[next] < state.blkIndent) {
      break;
    }
    if (state.src.slice(pos, max).trim().slice(-2) === "$$") {
      lastPos = state.src.slice(0, max).lastIndexOf("$$");
      lastLine = state.src.slice(pos, lastPos);
      found = true;
    }
  }
  state.line = next + 1;
  const token = state.push("math_block", "math", 0);
  token.block = true;
  token.content = (firstLine && firstLine.trim() ? `${firstLine}
` : "") + state.getLines(start + 1, next, state.tShift[start], true) + (lastLine && lastLine.trim() ? lastLine : "");
  token.map = [start, state.line];
  token.markup = "$$";
  return true;
}
function math_plugin(md2, options) {
  options = options || {};
  const katexInline = function(latex) {
    options.displayMode = false;
    try {
      return _katex2.default.renderToString(latex, options);
    } catch (error) {
      if (options.throwOnError)
        console.warn(error);
      return latex;
    }
  };
  const inlineRenderer = function(tokens, idx) {
    return katexInline(tokens[idx].content);
  };
  const katexBlock = function(latex) {
    options.displayMode = true;
    try {
      return `<p>${_katex2.default.renderToString(latex, options)}</p>`;
    } catch (error) {
      if (options.throwOnError)
        console.warn(error);
      return latex;
    }
  };
  const blockRenderer = function(tokens, idx) {
    return `${katexBlock(tokens[idx].content)}
`;
  };
  md2.inline.ruler.after("escape", "math_inline", math_inline);
  md2.block.ruler.after("blockquote", "math_block", math_block, {
    alt: ["paragraph", "reference", "blockquote", "list"]
  });
  md2.renderer.rules.math_inline = inlineRenderer;
  md2.renderer.rules.math_block = blockRenderer;
}

// node/plugins/markdown-it-prism.ts
var _prismjs = require('prismjs'); var _prismjs2 = _interopRequireDefault(_prismjs);
var _ = require('prismjs/components/'); var _2 = _interopRequireDefault(_);
var DEFAULTS = {
  plugins: [],
  init: () => {
  },
  defaultLanguageForUnknown: void 0,
  defaultLanguageForUnspecified: void 0,
  defaultLanguage: void 0
};
function loadPrismLang(lang) {
  if (!lang)
    return void 0;
  let langObject = _prismjs2.default.languages[lang];
  if (langObject === void 0) {
    _2.default.call(void 0, [lang]);
    langObject = _prismjs2.default.languages[lang];
  }
  return langObject;
}
function loadPrismPlugin(name) {
  try {
    _chunkKRCSYS75js.__require.call(void 0, `prismjs/plugins/${name}/prism-${name}`);
  } catch (e) {
    throw new Error(`Cannot load Prism plugin "${name}". Please check the spelling.`);
  }
}
function selectLanguage(options, lang) {
  let langToUse = lang;
  if (langToUse === "" && options.defaultLanguageForUnspecified !== void 0)
    langToUse = options.defaultLanguageForUnspecified;
  let prismLang = loadPrismLang(langToUse);
  if (prismLang === void 0 && options.defaultLanguageForUnknown !== void 0) {
    langToUse = options.defaultLanguageForUnknown;
    prismLang = loadPrismLang(langToUse);
  }
  return [langToUse, prismLang];
}
function highlight(markdownit, options, text, lang) {
  const [langToUse, prismLang] = selectLanguage(options, lang);
  const code = text.trimEnd().split(/\r?\n/g).map((line) => prismLang ? _prismjs2.default.highlight(line, prismLang, langToUse) : markdownit.utils.escapeHtml(line)).map((line) => `<span class="line">${line}</span>`).join("\n");
  const classAttribute = langToUse ? ` class="slidev-code ${markdownit.options.langPrefix}${markdownit.utils.escapeHtml(langToUse)}"` : "";
  return escapeVueInCode(`<pre${classAttribute}><code>${code}</code></pre>`);
}
function checkLanguageOption(options, optionName) {
  const language = options[optionName];
  if (language !== void 0 && loadPrismLang(language) === void 0)
    throw new Error(`Bad option ${optionName}: There is no Prism language '${language}'.`);
}
function markdownItPrism(markdownit, useroptions) {
  const options = Object.assign({}, DEFAULTS, useroptions);
  checkLanguageOption(options, "defaultLanguage");
  checkLanguageOption(options, "defaultLanguageForUnknown");
  checkLanguageOption(options, "defaultLanguageForUnspecified");
  options.defaultLanguageForUnknown = options.defaultLanguageForUnknown || options.defaultLanguage;
  options.defaultLanguageForUnspecified = options.defaultLanguageForUnspecified || options.defaultLanguage;
  options.plugins.forEach(loadPrismPlugin);
  options.init(_prismjs2.default);
  markdownit.options.highlight = (text, lang) => highlight(markdownit, options, text, lang);
}

// node/plugins/markdown-it-shiki.ts
function getThemeName(theme) {
  if (typeof theme === "string")
    return theme;
  return theme.name;
}
function resolveShikiOptions(options) {
  const themes = [];
  let darkModeThemes;
  if (!options.theme) {
    themes.push("nord");
  } else if (typeof options.theme === "string") {
    themes.push(options.theme);
  } else {
    if ("dark" in options.theme || "light" in options.theme) {
      darkModeThemes = options.theme;
      themes.push(options.theme.dark);
      themes.push(options.theme.light);
    } else {
      themes.push(options.theme);
    }
  }
  return _chunkKRCSYS75js.__spreadProps.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {}, options), {
    themes,
    darkModeThemes: darkModeThemes ? {
      dark: getThemeName(darkModeThemes.dark),
      light: getThemeName(darkModeThemes.light)
    } : void 0
  });
}
function trimEndNewLine(code) {
  return code.replace(/\n$/, "");
}
var MarkdownItShiki = (markdownit, options = {}) => {
  const _highlighter = options.highlighter;
  const { darkModeThemes } = resolveShikiOptions(options);
  markdownit.options.highlight = (code, lang) => {
    if (darkModeThemes) {
      const trimmed = trimEndNewLine(code);
      const dark = _highlighter.codeToHtml(trimmed, lang || "text", darkModeThemes.dark).replace('<pre class="shiki"', '<pre class="slidev-code shiki shiki-dark"');
      const light = _highlighter.codeToHtml(trimmed, lang || "text", darkModeThemes.light).replace('<pre class="shiki"', '<pre class="slidev-code shiki shiki-light"');
      return escapeVueInCode(`<pre class="shiki-container">${dark}${light}</pre>`);
    } else {
      return escapeVueInCode(_highlighter.codeToHtml(code, lang || "text").replace('<pre class="shiki"', '<pre class="slidev-code shiki"'));
    }
  };
};
var markdown_it_shiki_default = MarkdownItShiki;

// node/plugins/markdown.ts
var DEFAULT_SHIKI_OPTIONS = {
  theme: {
    dark: "min-dark",
    light: "min-light"
  }
};
async function createMarkdownPlugin({ data: { config }, roots, mode, entry }, { markdown: mdOptions }) {
  const setups = [];
  const entryPath = _utils.slash.call(void 0, entry);
  if (config.highlighter === "shiki") {
    const { getHighlighter } = await Promise.resolve().then(() => _chunkKRCSYS75js.__toModule.call(void 0, _chunkKRCSYS75js.__require.call(void 0, "shiki")));
    const shikiOptions = await loadSetups(roots, "shiki.ts", Shiki, DEFAULT_SHIKI_OPTIONS, false);
    const { langs, themes } = resolveShikiOptions(shikiOptions);
    shikiOptions.highlighter = await getHighlighter({ themes, langs });
    setups.push((md2) => md2.use(markdown_it_shiki_default, shikiOptions));
  } else {
    setups.push((md2) => md2.use(markdownItPrism));
  }
  const KatexOptions2 = await loadSetups(roots, "katex.ts", {}, { strict: false }, false);
  return _vitepluginmd2.default.call(void 0, _chunkKRCSYS75js.__spreadProps.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {
    wrapperClasses: "",
    headEnabled: false,
    frontmatter: false,
    markdownItOptions: _chunkKRCSYS75js.__spreadValues.call(void 0, {
      quotes: `""''`,
      html: true,
      xhtmlOut: true,
      linkify: true
    }, mdOptions == null ? void 0 : mdOptions.markdownItOptions)
  }, mdOptions), {
    markdownItSetup(md2) {
      var _a;
      md2.use(_markdownitlinkattributes2.default, {
        attrs: {
          target: "_blank",
          rel: "noopener"
        }
      });
      md2.use(_markdownitfootnote2.default);
      md2.use(math_plugin, KatexOptions2);
      setups.forEach((i) => i(md2));
      (_a = mdOptions == null ? void 0 : mdOptions.markdownItSetup) == null ? void 0 : _a.call(mdOptions, md2);
    },
    transforms: {
      before(code, id) {
        if (id === entryPath)
          return "";
        const monaco = config.monaco === true || config.monaco === mode ? transformMarkdownMonaco : truncateMancoMark;
        code = transformSlotSugar(code);
        code = transformMermaid(code);
        code = monaco(code);
        code = transformHighlighter(code);
        code = transformPageCSS(code, id);
        return code;
      }
    }
  }));
}
function transformMarkdownMonaco(md2) {
  md2 = md2.replace(/^```(\w+?)\s*{monaco}\s*?({.*?})?\s*?\n([\s\S]+?)^```/mg, (full, lang = "ts", options = "{}", code) => {
    lang = lang.trim();
    options = options.trim() || "{}";
    const encoded = _jsbase642.default.encode(code, true);
    return `<Monaco :code="'${encoded}'" lang="${lang}" v-bind="${options}" />`;
  });
  return md2;
}
function truncateMancoMark(md2) {
  return md2.replace(/{monaco.*?}/g, "");
}
function transformSlotSugar(md2) {
  const lines = md2.split(/\r?\n/g);
  let prevSlot = false;
  const { isLineInsideCodeblocks } = getCodeBlocks(md2);
  lines.forEach((line, idx) => {
    if (isLineInsideCodeblocks(idx))
      return;
    const match = line.trimRight().match(/^::\s*(\w+)\s*::$/);
    if (match) {
      lines[idx] = `${prevSlot ? "\n\n</template>\n" : "\n"}<template v-slot:${match[1]}="slotProps">
`;
      prevSlot = true;
    }
  });
  if (prevSlot)
    lines[lines.length - 1] += "\n\n</template>";
  return lines.join("\n");
}
function transformHighlighter(md2) {
  return md2.replace(/^```(\w+?)\s*{([\d\w*,\|-]+)}\s*?({.*?})?\s*?\n([\s\S]+?)^```/mg, (full, lang = "", rangeStr, options = "", code) => {
    const ranges = rangeStr.split(/\|/g).map((i) => i.trim());
    code = code.trimEnd();
    options = options.trim() || "{}";
    return `
<CodeHighlightController v-bind="${options}" :ranges='${JSON.stringify(ranges)}'>

\`\`\`${lang}
${code}
\`\`\`

</CodeHighlightController>`;
  });
}
function getCodeBlocks(md2) {
  const codeblocks = Array.from(md2.matchAll(/^```[\s\S]*?^```/mg)).map((m) => {
    var _a, _b;
    const start = m.index;
    const end = m.index + m[0].length;
    const startLine = ((_a = md2.slice(0, start).match(/\n/g)) == null ? void 0 : _a.length) || 0;
    const endLine = ((_b = md2.slice(0, end).match(/\n/g)) == null ? void 0 : _b.length) || 0;
    return [start, end, startLine, endLine];
  });
  return {
    codeblocks,
    isInsideCodeblocks(idx) {
      return codeblocks.some(([s, e]) => s <= idx && idx <= e);
    },
    isLineInsideCodeblocks(line) {
      return codeblocks.some(([, , s, e]) => s <= line && line <= e);
    }
  };
}
function transformPageCSS(md2, id) {
  var _a;
  const page = (_a = id.match(/(\d+)\.md$/)) == null ? void 0 : _a[1];
  if (!page)
    return md2;
  const { isInsideCodeblocks } = getCodeBlocks(md2);
  const result = md2.replace(/(\n<style[^>]*?>)([\s\S]+?)(<\/style>)/g, (full, start, css, end) => {
    const index = md2.indexOf(full);
    if (index < 0 || isInsideCodeblocks(index))
      return full;
    if (!start.includes("scoped"))
      start = start.replace("<style", "<style scoped");
    return `${start}
.slidev-page-${page}{${css}}${end}`;
  });
  return result;
}
function transformMermaid(md2) {
  return md2.replace(/^```mermaid\s*?({.*?})?\n([\s\S]+?)\n```/mg, (full, options = "", code = "") => {
    code = code.trim();
    options = options.trim() || "{}";
    const encoded = _jsbase642.default.encode(code, true);
    return `<Mermaid :code="'${encoded}'" v-bind="${options}" />`;
  });
}
function escapeVueInCode(md2) {
  return md2.replace(/{{(.*?)}}/g, "&lbrace;&lbrace;$1&rbrace;&rbrace;");
}

// node/plugins/fix.ts
function createFixPlugins({ mode }) {
  const DEV = mode === "dev" ? "true" : "false";
  return [
    {
      name: "slidev:flags",
      enforce: "pre",
      transform(code, id) {
        if (id.endsWith(".vue"))
          return code.replace(/__DEV__/g, DEV);
      }
    }
  ];
}

// node/plugins/preset.ts
var customElements = new Set([
  "annotation",
  "math",
  "mrow",
  "mcol",
  "mfrac",
  "mi",
  "mn",
  "mo",
  "mover",
  "mspace",
  "mtable",
  "mtd",
  "msup",
  "msqrt",
  "mtr",
  "semantics",
  "mstyle",
  "mtext"
]);
async function ViteSlidevPlugin(options, pluginOptions, serverOptions = {}) {
  const {
    vue: vueOptions = {},
    components: componentsOptions = {},
    icons: iconsOptions = {},
    remoteAssets: remoteAssetsOptions = {}
  } = pluginOptions;
  const {
    mode,
    themeRoots,
    clientRoot,
    data: { config }
  } = options;
  const VuePlugin = _pluginvue2.default.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {
    include: [/\.vue$/, /\.md$/],
    exclude: [],
    template: _chunkKRCSYS75js.__spreadValues.call(void 0, {
      compilerOptions: {
        isCustomElement(tag) {
          return customElements.has(tag);
        }
      }
    }, vueOptions == null ? void 0 : vueOptions.template)
  }, vueOptions));
  const MarkdownPlugin = await createMarkdownPlugin(options, pluginOptions);
  return [
    await createWindiCSSPlugin(options, pluginOptions),
    MarkdownPlugin,
    VuePlugin,
    createSlidesLoader(options, pluginOptions, serverOptions, VuePlugin, MarkdownPlugin),
    _viteplugincomponents2.default.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {
      extensions: ["vue", "md", "ts"],
      dirs: [
        `${clientRoot}/builtin`,
        `${clientRoot}/components`,
        ...themeRoots.map((i) => `${i}/components`),
        "src/components",
        "components"
      ],
      customLoaderMatcher: (id) => id.endsWith(".md"),
      customComponentResolvers: [
        _vitepluginicons.ViteIconsResolver.call(void 0, {
          componentPrefix: ""
        })
      ]
    }, componentsOptions)),
    _vitepluginicons2.default.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {}, iconsOptions)),
    config.remoteAssets === true || config.remoteAssets === mode ? _vitepluginremoteassets2.default.call(void 0, _chunkKRCSYS75js.__spreadValues.call(void 0, {
      rules: [
        ..._vitepluginremoteassets.DefaultRules,
        {
          match: /\b(https?:\/\/image.unsplash\.com.*?)(?=[`'")\]])/ig,
          ext: ".png"
        }
      ],
      resolveMode: (id) => id.endsWith("index.html") ? "relative" : "@fs",
      awaitDownload: mode === "build"
    }, remoteAssetsOptions)) : null,
    server_ref_default({
      dataMap: {
        sync: false,
        state: {
          page: 0,
          clicks: 0
        }
      }
    }),
    createConfigPlugin(options),
    createClientSetupPlugin(options),
    createMonacoTypesLoader(),
    createFixPlugins(options)
  ].flat().filter(_utils.notNullish);
}






exports.getIndexHtml = getIndexHtml; exports.require_fast_deep_equal = require_fast_deep_equal; exports.createWindiCSSPlugin = createWindiCSSPlugin; exports.ViteSlidevPlugin = ViteSlidevPlugin;
